import 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:provider/provider.dart';
import 'package:tn_promo/core/internal/infrastructure/extensions/build_context_extension.dart';
import 'package:tn_promo/core/internal/presentation/themes/tn_colors.dart';
import 'package:tn_promo/core/internal/presentation/widgets/widgets.dart';
import 'package:tn_promo/features/navigation/presentation/routes/app_router.gr.dart';
import 'package:tn_promo/generated/l10n.dart';
import 'package:tn_promo/injection.dart';

Widget buildProvider() {
  return BlocProvider<${upperName}Bloc>(
    create: (_) => getIt<${upperName}Bloc>()..add(${upperName}Started()),
    child: Container(),
  );
}

Widget provideValue(BuildContext context) {
  return BlocProvider<${upperName}Bloc>.value(
    value: context.bloc<${upperName}Bloc>(),
    child: Container(),
  );
}

Widget buildBuilder() {
  return BlocBuilder<${upperName}Bloc, ${upperName}State>(
    buildWhen: _${privateName}BuildCondition,
    builder: _${privateName}Builder,
  );
}

Widget buildListener() {
  return BlocListener<${upperName}Bloc, ${upperName}State>(
    listenWhen: _${privateName}ListenCondition,
    listener: _${privateName}Listener,
  );
}

Widget buildConsumer() {
  return BlocConsumer<${upperName}Bloc, ${upperName}State>(
    buildWhen: _${privateName}BuildCondition,
    builder: _${privateName}Builder,
    listenWhen: _${privateName}ListenCondition,
    listener: _${privateName}Listener,
  );
}

bool _${privateName}BuildCondition(${upperName}State previous, ${upperName}State current) {
  return previous != current;
}

Widget _${privateName}Builder(BuildContext context, ${upperName}State state) {
  return state.maybeMap(
    success: (s) => _buildWidget(context, s),
    failure: (s) => defaultErrorBuilder(context, s.errorMessage),
    orElse: () => defaultLoaderBuilder(context),
  );
}

bool _${privateName}ListenCondition(${upperName}State previous, ${upperName}State current) {
  return previous != current;
}

void _${privateName}Listener(BuildContext context, ${upperName}State state) {

}

Widget _buildWidget(BuildContext context, ${upperName}State state) {
  return Container();
}

