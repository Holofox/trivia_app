import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:injectable/injectable.dart';

part '${inputName}_bloc.freezed.dart';
part '${inputName}_event.dart';
part '${inputName}_state.dart';

@injectable
class ${upperName}Bloc extends Bloc<${upperName}Event, ${upperName}State> {
 	${upperName}Bloc(this._${privateName}Repository) : super(const ${upperName}Initial());

  final I${upperName}Repository _${privateName}Repository;

  @override
  Stream<${upperName}State> mapEventToState(${upperName}Event event) async* {
    yield* event.map(
      started: _mapStartedToState,
    );
  }
  
  Stream<${upperName}State> _mapStartedToState(${upperName}Started event) async* {
    yield const ${upperName}InProgress();
  }
}

